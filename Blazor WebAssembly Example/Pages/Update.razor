@page "/Update/{id:int}"
<link href="/validation.css" rel="stylesheet" />

<h1 class="bg-info text-white">Update Student</h1>
<h2 class="text-success p-2">@FormSubmitMessage</h2>

<EditForm Model="StudentData" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Id</label>
        <ValidationMessage For="@(() => StudentData.Id)" />
        <InputNumber disabled class="form-control" @bind-Value="StudentData.Id" />
    </div>
    <div class="form-group">
        <label>Name</label>
        <ValidationMessage For="@(() => StudentData.Name)" />
        <InputText class="form-control" @bind-Value="StudentData.Name" />
    </div>
    <div class="form-group">
        <label>Course</label>
        <ValidationMessage For="@(() => StudentData.Course)" />
        <InputText class="form-control" @bind-Value="StudentData.Course" />
    </div>
    <div class="form-group">
        <label>Year</label>
        <ValidationMessage For="@(() => StudentData.Year)" />
        <InputText class="form-control" @bind-Value="StudentData.Year" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Update</button>
    </div>
</EditForm>

@if (ReceivedStudent != null)
{
   <h3 class="text-warning p-2">Student</h3>
    <table class="table table-sm table-striped table-bordered m-2">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Course</th>
                <th>Year</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@ReceivedStudent.Id</td>
                <td>@ReceivedStudent.Name</td>
                <td>@ReceivedStudent.Course</td>
                <td>@ReceivedStudent.Year</td>
            </tr>
        </tbody>
    </table>
}

@code {
    public Student StudentData;
    public Student ReceivedStudent;

    public string FormSubmitMessage { get; set; } = "Student Not Updated";

    [Parameter]
    public int Id { get; set; }

    public async Task HandleValidSubmit()
    {
        ReceivedStudent = new Student();
        using (var httpClient = new HttpClient())
        {
            var content = new MultipartFormDataContent();
            content.Add(new StringContent(StudentData.Id.ToString()), "Id");
            content.Add(new StringContent(StudentData.Name), "Name");
            content.Add(new StringContent(StudentData.Course), "Course");
            content.Add(new StringContent(StudentData.Year), "Year");

            using (var response = await httpClient.PutAsync("http://localhost:8888/api/Student", content))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                ReceivedStudent = JsonConvert.DeserializeObject<Student>(apiResponse);
            }
        }
        FormSubmitMessage = "Student Updated";
    }

    protected async override Task OnParametersSetAsync()
    {
        StudentData = new Student();
        using (var httpClient = new HttpClient())
        {
            using (var response = await httpClient.GetAsync("http://localhost:8888/api/Student/" + Id))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                StudentData = JsonConvert.DeserializeObject<Student>(apiResponse);
            }
        }
    }

    public void HandleInvalidSubmit() => FormSubmitMessage = "Invalid Student";
}
