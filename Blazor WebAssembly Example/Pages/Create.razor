@page "/Create"
<link href="/validation.css" rel="stylesheet" />

<h1 class="bg-info text-white">Create Student</h1>
<h2 class="text-success p-2">@FormSubmitMessage</h2>

<EditForm Model="StudentData" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary />

    <div class="form-group">
        <label>Name</label>
        <ValidationMessage For="@(() => StudentData.Name)" />
        <InputText class="form-control" @bind-Value="StudentData.Name" />
    </div>
    <div class="form-group">
        <label>Course</label>
        <ValidationMessage For="@(() => StudentData.Course)" />
        <InputText class="form-control" @bind-Value="StudentData.Course" />
    </div>
    <div class="form-group">
        <label>Year</label>
        <ValidationMessage For="@(() => StudentData.Year)" />
        <InputText class="form-control" @bind-Value="StudentData.Year" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Create</button>
    </div>
</EditForm>

@if (CreatedStudent != null)
{
    <h3 class="text-warning p-2">Student</h3>
    <table class="table table-sm table-striped table-bordered m-2">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Course</th>
                <th>Year</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@CreatedStudent.Id</td>
                <td>@CreatedStudent.Name</td>
                <td>@CreatedStudent.Course</td>
                <td>@CreatedStudent.Year</td>
            </tr>
        </tbody>
    </table>
}

@code {
    public Student StudentData = new Student();
    Student CreatedStudent;
    public string FormSubmitMessage { get; set; } = "Student Not Created";

    public async Task HandleValidSubmit()
    {
        CreatedStudent = new Student();
        using (var httpClient = new HttpClient())
        {
            StringContent content = new StringContent(JsonConvert.SerializeObject(StudentData), Encoding.UTF8, "application/json");

            using (var response = await httpClient.PostAsync("http://localhost:8888/api/Student", content))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                CreatedStudent = JsonConvert.DeserializeObject<Student>(apiResponse);
            }
        }
        FormSubmitMessage = "Student Created";
    }

    public void HandleInvalidSubmit() => FormSubmitMessage = "Invalid Student";
}